// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2811.Stronghold2016.subsystems;

import java.io.IOException;

import com.ni.vision.NIVision;
import com.ni.vision.NIVision.Image;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.networktables.NetworkTable;


/**
 *
 */
public class Vision extends Subsystem {
	
	private NetworkTable grip;
	private String tableName;
	private double[] defaultValue = new double[0];
	private double defaultSingleValue = 0;
	private String unconnectedError = "VISION: Error -> NT not connected!";
	
	public Vision(String networkTableName){
	//initial set up code	
		tableName = networkTableName; //name of the network table. Ex: "GRIP/myContoursReport"
	}
	
	public void cameraInit(){ //initializes the camera feed
		Image frame;
		int session;
		frame = NIVision.imaqCreateImage(NIVision.ImageType.IMAGE_RGB, 0);
    	session = NIVision.IMAQdxOpenCamera("cam0",
                NIVision.IMAQdxCameraControlMode.CameraControlModeController);
        NIVision.IMAQdxConfigureGrab(session);
	}
	
	public void netTableInit(){ //initializes the network table with the value of tableName
		grip = NetworkTable.getTable(tableName);
		System.out.println("VISION: NT Connected: " + grip.isConnected());
	}
	
	public void gripInit(){ //initializes grip on the roborio
		try {
    		new ProcessBuilder("/usr/local/frc/JRE/bin/java", "-jar", "/home/lvuser/grip.jar",
    				"/home/lvuser/project.grip").inheritIO().start();
    		//TODO add print statement to make sure things work right
    		
    	} catch (IOException e) {
    		e.printStackTrace();
    	}
	}
	
	private boolean tableConnected(){
		if(grip.isConnected()){
			return true;
		}
		return false;
	}
	
	public double[] getValArray(String tableKey){ //can be used to get number array values such as area
		if(tableConnected()){
			return grip.getNumberArray(tableKey, defaultValue);
		}else{
			System.out.println(unconnectedError);
			return defaultValue;
		}
	}
	
	public double[] getCoord(){ //returns (x, y) coordinate 
		if(tableConnected()){
			double getX = grip.getNumber("centerX", defaultSingleValue);
			double getY = grip.getNumber("centerY", defaultSingleValue);
			double[] centerXY = {getX, getY};
			return centerXY;
		}else{
			System.out.println(unconnectedError);
			return defaultValue;
		}
	}
	


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

