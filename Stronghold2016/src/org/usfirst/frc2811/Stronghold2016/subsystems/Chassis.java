// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2811.Stronghold2016.subsystems;

import org.usfirst.frc2811.Stronghold2016.Robot;
import org.usfirst.frc2811.Stronghold2016.RobotMap;

import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SerialPort;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.command.PIDSubsystem;


/**
 *
 */
public class Chassis extends PIDSubsystem{

    public AHRS navxGyro = new AHRS(SerialPort.Port.kMXP); 
    
    private Solenoid gearShifter = new Solenoid(0, 0);
    
    public ArcadeDrivePID chassisDrive;
    

    private double tolerance = 3;
    private double rotateRate;
    private double rateTolerance;
    
    public Chassis(double p, double i, double d){
    	
    	
    	super("GyroPID",p,i,d);
    	System.out.println("Chassis, Statement #" + RobotMap.counter);
    	RobotMap.counter++;
    	chassisDrive = new ArcadeDrivePID();
    	System.out.println("Chassis after ArcadeDrivePID, Statement #" + RobotMap.counter);
    	RobotMap.counter++;
    	
    	chassisDrive.setSafetyEnabled(true);
        chassisDrive.setExpiration(0.1);
        chassisDrive.setSensitivity(0.5);
        chassisDrive.setMaxOutput(1.0);
    	
    }
    
    public void initDefaultCommand() {

    	//TODO Find default shifter position
    	gearShifter.set(false);
        
        getPIDController().setInputRange(-180.0, 180.0);
        getPIDController().setOutputRange(-1.0, 1.0);
        getPIDController().setAbsoluteTolerance(tolerance);
        getPIDController().setContinuous(true);
    }
    
    public void shiftGears(){
    	gearShifter.set(!gearShifter.get());
    }
    
    public void joystickDrive(){
    	chassisDrive.arcadeDrive(Robot.oi.gamePad.getRawAxis(1), Robot.oi.gamePad.getRawAxis(2),false);
    }
    
    /** 
     * Might have to be called continuously //TODO test continuous calling
     * @param degrees Only set values from -179.9 to 179.9, 0 included. //TODO Requires testing of 180 deg. 
     */
    public void setRotation(double degrees){
    	setSetpoint(degrees);
    	chassisDrive.arcadeDrive(0, rotateRate);
    }
    
    public void driveRate(double rate){
    	chassisDrive.leftSide.setSetpoint(rate);
    	chassisDrive.rightSide.setSetpoint(rate);
    }
    
    public double getLeftRate(){
    	return chassisDrive.leftSide.getSideRate();
    }
    
    public int getLeftDistance(){
    	return chassisDrive.leftSide.getSideDistance();
    }
    
    public double getRightRate(){
    	return chassisDrive.rightSide.getSideRate();
    }
    
    public int getRightDistance(){
    	return chassisDrive.rightSide.getSideDistance();
    }
    
    public void resetTicks(){
    	chassisDrive.leftSide.resetSideTicks();
    	chassisDrive.rightSide.resetSideTicks();
    }
    
    /**
     * @return Whether or not the robot is aligned to an angle (in degrees)
     */
    public boolean isOnTarget(){
    	return Math.abs(getSetpoint()-navxGyro.getAngle())<=tolerance;
    }

	@Override
	protected double returnPIDInput() {
		// TODO Auto-generated method stub
		return navxGyro.getAngle();
	}

	@Override
	protected void usePIDOutput(double output) {
		// TODO Auto-generated method stub
		rotateRate=output;
		
		
	}
 
}

