// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2811.Stronghold2016.subsystems;

import org.usfirst.frc2811.Stronghold2016.Robot;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class Shooter extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
    //private static Encoder shooterQuadratureEncoderLeft = new Encoder(4, 5, false, EncodingType.k4X);
    //private static Encoder shooterQuadratureEncoderRight = new Encoder(2, 3, false, EncodingType.k4X);
    //private static CANTalon shooterCANTalonLeft = new CANTalon(0);
    //private static CANTalon shooterCANTalonRight = new CANTalon(1);
    

  
   
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Initialize your subsystem here
    public Shooter() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        
        //shooterQuadratureEncoderLeft.setDistancePerPulse(1.0);
        //shooterQuadratureEncoderLeft.setPIDSourceType(PIDSourceType.kRate);
        //shooterQuadratureEncoderRight.setDistancePerPulse(1.0);
        //shooterQuadratureEncoderRight.setPIDSourceType(PIDSourceType.kRate);
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public double distanceToFPS(double distance){
    	double g = 32;//32 feet per second
    	double y = 7.5;//TODO double check target height
    	double x = distance;// FIXME get the distance to goal in x direction from camera in feet
    	double theta = Math.toRadians(48);//TODO remeasure on physical robot
    	double time;
    	time = Math.sqrt(((2*y)-(2*Math.tan(theta)*x)/g));
    	double feetPerSecond = Math.sqrt((Math.pow(x/time, 2))+(Math.pow((Math.tan(theta)*x)/time, 2)));
    	/*
    	GIANT DERIVED MONSTROSITY IS HERE
    	                          ___________________________________________________________________________
    	                         / [						] 2			   [							]2
    	                        /  | 		  X				| 			   |		tan(theta)*x		|	
    	                       /   |  ___________________	|			   |  _______________________	|
    	                      /	   |    _________________	|       +      |    __________________		|
    	                     /	   |   / 2y-2tan(theta)*x	|			   |   / 2y-2tan(theta)*x		|
    	                    /	   |  /  ________________   |			   |  /  _________________		|
    	                   /	   | /		 gravity		|			   | /		 gravity			|
    	feetPerSecond =   /		   |V						|			   |V							|
    	                 V		   [						]			   [ 							]
    	*/
    	return feetPerSecond;
    	//DO math to convert distance to velocity
    	
    }
    
    
    
    protected double map( double input, double maximum, double minimum, double outputMax, double outputMin){
    	double output = (input/(maximum-minimum)-minimum/(maximum-minimum))*(outputMax-outputMin)+outputMin;
    	if (output==Double.NaN){
    		output=minimum;//Shouldn't happen unless we divide by zero somewhere
    		}
    	return output; 
    }
    
}
