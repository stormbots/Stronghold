// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2811.Stronghold2016;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController intakeSpeedController1;
    public static Solenoid intakeSolenoid1;
    public static Encoder shooterQuadratureEncoder1;
    public static Encoder shooterQuadratureEncoder2;
    public static CANTalon shooterCANTalon1;
    public static CANTalon shooterCANTalon2;
    public static Solenoid chassisShifter;
    public static SpeedController chassisSpeedController1;
    public static SpeedController chassisSpeedController2;
    public static SpeedController chassisSpeedController3;
    public static SpeedController chassisSpeedController4;
    public static RobotDrive chassisRobotDrive4;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        intakeSpeedController1 = new Talon(4);
        LiveWindow.addActuator("Intake", "Speed Controller 1", (Talon) intakeSpeedController1);
        
        intakeSolenoid1 = new Solenoid(0, 1);
        LiveWindow.addActuator("Intake", "Solenoid 1", intakeSolenoid1);
        
        shooterQuadratureEncoder1 = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Shooter", "Quadrature Encoder 1", shooterQuadratureEncoder1);
        shooterQuadratureEncoder1.setDistancePerPulse(1.0);
        shooterQuadratureEncoder1.setPIDSourceType(PIDSourceType.kRate);
        shooterQuadratureEncoder2 = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("Shooter", "Quadrature Encoder 2", shooterQuadratureEncoder2);
        shooterQuadratureEncoder2.setDistancePerPulse(1.0);
        shooterQuadratureEncoder2.setPIDSourceType(PIDSourceType.kRate);
        shooterCANTalon1 = new CANTalon(0);
        LiveWindow.addActuator("Shooter", "CAN Talon 1", shooterCANTalon1);
        
        shooterCANTalon2 = new CANTalon(1);
        LiveWindow.addActuator("Shooter", "CAN Talon 2", shooterCANTalon2);
        
        chassisShifter = new Solenoid(0, 0);
        LiveWindow.addActuator("Chassis", "Shifter", chassisShifter);
        
        chassisSpeedController1 = new Talon(0);
        LiveWindow.addActuator("Chassis", "Speed Controller 1", (Talon) chassisSpeedController1);
        
        chassisSpeedController2 = new Talon(1);
        LiveWindow.addActuator("Chassis", "Speed Controller 2", (Talon) chassisSpeedController2);
        
        chassisSpeedController3 = new Talon(2);
        LiveWindow.addActuator("Chassis", "Speed Controller 3", (Talon) chassisSpeedController3);
        
        chassisSpeedController4 = new Talon(3);
        LiveWindow.addActuator("Chassis", "Speed Controller 4", (Talon) chassisSpeedController4);
        
        chassisRobotDrive4 = new RobotDrive(chassisSpeedController1, chassisSpeedController2,
              chassisSpeedController3, chassisSpeedController4);
        
        chassisRobotDrive4.setSafetyEnabled(true);
        chassisRobotDrive4.setExpiration(0.1);
        chassisRobotDrive4.setSensitivity(0.5);
        chassisRobotDrive4.setMaxOutput(1.0);


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
